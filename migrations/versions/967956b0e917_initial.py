"""Initial.

Revision ID: 967956b0e917
Revises: 
Create Date: 2024-01-03 01:21:52.930677

"""
import sqlalchemy as sa
from alembic import op

import st_server

# revision identifiers, used by Alembic.
revision = "967956b0e917"
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "application",
        sa.Column(
            "id",
            st_server.shared.infrastructure.persistence.mysql.entity_id.EntityIdDbType(
                length=32
            ),
            nullable=False,
        ),
        sa.Column("name", sa.String(length=255), nullable=True),
        sa.Column("version", sa.String(length=255), nullable=True),
        sa.Column("architect", sa.String(length=255), nullable=True),
        sa.Column("discarded", sa.Boolean(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "server",
        sa.Column(
            "id",
            st_server.shared.infrastructure.persistence.mysql.entity_id.EntityIdDbType(
                length=32
            ),
            nullable=False,
        ),
        sa.Column("name", sa.String(length=255), nullable=True),
        sa.Column("cpu", sa.String(length=255), nullable=True),
        sa.Column("ram", sa.String(length=255), nullable=True),
        sa.Column("hdd", sa.String(length=255), nullable=True),
        sa.Column(
            "environment",
            st_server.server.infrastructure.persistence.mysql.server.environment.EnvironmentDbType(
                length=255
            ),
            nullable=True,
        ),
        sa.Column(
            "operating_system",
            st_server.server.infrastructure.persistence.mysql.server.operating_system.OperatingSystemDbType(),
            nullable=True,
        ),
        sa.Column(
            "status",
            st_server.server.infrastructure.persistence.mysql.server.server_status.ServerStatusDbType(
                length=255
            ),
            nullable=True,
        ),
        sa.Column("discarded", sa.Boolean(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "credential",
        sa.Column(
            "id",
            st_server.shared.infrastructure.persistence.mysql.entity_id.EntityIdDbType(
                length=32
            ),
            nullable=False,
        ),
        sa.Column(
            "server_id",
            st_server.shared.infrastructure.persistence.mysql.entity_id.EntityIdDbType(
                length=32
            ),
            nullable=True,
        ),
        sa.Column(
            "connection_type",
            st_server.server.infrastructure.persistence.mysql.server.connection_type.ConnectionTypeDbType(
                length=255
            ),
            nullable=True,
        ),
        sa.Column("local_ip", sa.String(length=255), nullable=True),
        sa.Column("local_port", sa.String(length=255), nullable=True),
        sa.Column("public_ip", sa.String(length=255), nullable=True),
        sa.Column("public_port", sa.String(length=255), nullable=True),
        sa.Column("username", sa.String(length=255), nullable=True),
        sa.Column("password", sa.String(length=255), nullable=True),
        sa.Column("discarded", sa.Boolean(), nullable=True),
        sa.ForeignKeyConstraint(
            ["server_id"],
            ["server.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "server_application",
        sa.Column(
            "server_id",
            st_server.shared.infrastructure.persistence.mysql.entity_id.EntityIdDbType(
                length=32
            ),
            nullable=False,
        ),
        sa.Column(
            "application_id",
            st_server.shared.infrastructure.persistence.mysql.entity_id.EntityIdDbType(
                length=32
            ),
            nullable=False,
        ),
        sa.Column("install_dir", sa.String(length=255), nullable=True),
        sa.Column("log_dir", sa.String(length=255), nullable=True),
        sa.ForeignKeyConstraint(
            ["application_id"],
            ["application.id"],
        ),
        sa.ForeignKeyConstraint(
            ["server_id"],
            ["server.id"],
        ),
        sa.PrimaryKeyConstraint("server_id", "application_id"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("server_application")
    op.drop_table("credential")
    op.drop_table("server")
    op.drop_table("application")
    # ### end Alembic commands ###
